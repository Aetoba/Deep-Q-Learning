import numpy as np

from utils.process_frame import phi
from utils.run_network import max_action_preds
from utils.choose_action import choose_action

from PIL import Image

class Exploit:
    """
    Runs with epsilon = 0.05 to estimate performance.
    """
    def __init__(self, sess, Q, env, frame_stack_size, max_steps):
        self.sess = sess
        self.Q = Q
        self.env = env
        self.n_actions = env.action_space.n
        self.frame_stack_size = frame_stack_size
        self.max_steps = max_steps

    def run_random(self, cap=False, render=False):
        n_screen = self.env.reset()
        if cap:
            img = Image.fromarray(n_screen, 'RGB')
            img.save('./data/not_runs/capture/0.png')
        if render:
            self.env.render()

        tot_rew = 0
        step = 1
        done = False
        while step < self.max_steps and not done:
            n_screen, rew, done, _ = self.env.step(self.env.action_space.sample())
            if cap:
                img = Image.fromarray(n_screen, 'RGB')
                img.save('./data/not_runs/capture/' + str(step) + '.png')
            if render:
                self.env.render()
            tot_rew += rew
            step += 1
        return tot_rew, step


    def run_exploit(self):
        return self.run()

    def run(self, cap=False, cap_prepro=False, render=False):
        n_screen = self.env.reset()
        if cap:
            img = Image.fromarray(n_screen, 'RGB')
            img.save('./data/not_runs/capture/0.png')
        if render:
            self.env.render()
        state, stack_state = phi(n_screen, self.frame_stack_size, new_episode=True)
        if cap_prepro:
            img = Image.fromarray(state[self.frame_stack_size-1], 'L')
            img.save('./data/not_runs/capture_pre_proc/0.png')

        step = 1
        done = False
        total_rew = 0
        while step < self.max_steps and not done:
            action, p_val = choose_action(stack_state, self.Q, self.sess, 0.05, self.n_actions)
            n_screen, reward, done, _ = self.env.step(np.argmax(action))
            if cap:
                img = Image.fromarray(n_screen, 'RGB')
                img.save('./data/not_runs/capture/' + str(step) + '.png')
            if render:
                self.env.render()
            total_rew += reward
            state, stack_state = phi(n_screen, self.frame_stack_size, curr_state=state)
            if cap_prepro:
                img = Image.fromarray(state[self.frame_stack_size-1], 'L')
                img.save('./data/not_runs/capture_pre_proc/' + str(step) + '.png')
            step += 1

        return total_rew, step
